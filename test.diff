diff --git a/hse_mooc/app/src/main/AndroidManifest.xml b/hse_mooc/app/src/main/AndroidManifest.xml
index 489b9c9..9178f95 100644
--- a/hse_mooc/app/src/main/AndroidManifest.xml
+++ b/hse_mooc/app/src/main/AndroidManifest.xml
@@ -5,6 +5,7 @@
     <uses-permission android:name="android.permission.INTERNET" />
 
     <application
+        android:name=".App"
         android:allowBackup="true"
         android:icon="@mipmap/ic_launcher"
         android:label="@string/app_name"
diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/App.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/App.kt
new file mode 100644
index 0000000..09a191e
--- /dev/null
+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/App.kt
@@ -0,0 +1,19 @@
+package ru.andrewkir.hse_mooc
+
+import android.app.Application
+import ru.andrewkir.hse_mooc.di.AppComponent
+import ru.andrewkir.hse_mooc.di.AppModule
+
+class App : Application() {
+    lateinit var appComponent: AppComponent
+
+    override fun onCreate() {
+        super.onCreate()
+
+//        appComponent = DaggerAppComponent
+//            .builder()
+//            .appModule(AppModule(context = this))
+//            .build()
+    }
+
+}
\ No newline at end of file
diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/common/BaseFragment.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/common/BaseFragment.kt
index cb8d6f9..cc9715b 100644
--- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/common/BaseFragment.kt
+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/common/BaseFragment.kt
@@ -21,7 +21,7 @@ abstract class BaseFragment<viewModel : BaseViewModel, repo : BaseRepository, vi
     protected lateinit var bind: viewBinding
     protected lateinit var viewModel: viewModel
 
-    protected var apiProvider = ApiProvider()
+    protected val apiProvider = ApiProvider()
     protected lateinit var userPrefsManager: UserPrefsManager
 
     override fun onCreateView(
@@ -31,9 +31,7 @@ abstract class BaseFragment<viewModel : BaseViewModel, repo : BaseRepository, vi
     ): View? {
         bind = provideBinding(inflater, container)
         userPrefsManager = UserPrefsManager(requireContext())
-
-        val viewModelFactory = ViewModelFactory(provideRepository())
-        viewModel = ViewModelProvider(this, viewModelFactory).get(provideViewModelClass())
+        viewModel = provideViewModel()
 
         return bind.root
     }
@@ -49,7 +47,7 @@ abstract class BaseFragment<viewModel : BaseViewModel, repo : BaseRepository, vi
     }
 
 
-    abstract fun provideViewModelClass(): Class<viewModel>
+    abstract fun provideViewModel(): viewModel
 
     abstract fun provideRepository(): repo
 
diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/AppComponent.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/AppComponent.kt
new file mode 100644
index 0000000..1408256
--- /dev/null
+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/AppComponent.kt
@@ -0,0 +1,26 @@
+package ru.andrewkir.hse_mooc.di
+
+import androidx.viewbinding.ViewBinding
+import dagger.Component
+import ru.andrewkir.hse_mooc.common.BaseFragment
+import ru.andrewkir.hse_mooc.common.BaseViewModel
+import ru.andrewkir.hse_mooc.data.repositories.BaseRepository
+import ru.andrewkir.hse_mooc.flows.auth.AuthFragment
+import ru.andrewkir.hse_mooc.flows.auth.login.LoginFragment
+import ru.andrewkir.hse_mooc.flows.auth.register.RegisterFragment
+import ru.andrewkir.hse_mooc.flows.course.CourseFragment
+import ru.andrewkir.hse_mooc.flows.courses.profile.ProfileFragment
+import ru.andrewkir.hse_mooc.flows.courses.search.CoursesSearchFragment
+import javax.inject.Singleton
+
+@Component(modules = [AppModule::class, DataModule::class, ViewModelModule::class, NetworkModule::class])
+@Singleton
+interface AppComponent {
+    fun inject(baseFragment: BaseFragment<BaseViewModel, BaseRepository, ViewBinding>)
+    fun inject(profileFragment: ProfileFragment)
+    fun inject(loginFragment: LoginFragment)
+    fun inject(registerFragment: RegisterFragment)
+    fun inject(coursesSearchFragment: CoursesSearchFragment)
+    fun inject(courseFragment: CourseFragment)
+    fun inject(authFragment: AuthFragment)
+}
\ No newline at end of file
diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/NetworkModule.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/NetworkModule.kt
new file mode 100644
index 0000000..3e97635
--- /dev/null
+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/NetworkModule.kt
@@ -0,0 +1,96 @@
+package ru.andrewkir.hse_mooc.di
+
+import dagger.Module
+import dagger.Provides
+import okhttp3.Authenticator
+import okhttp3.OkHttpClient
+import okhttp3.logging.HttpLoggingInterceptor
+import retrofit2.Retrofit
+import retrofit2.converter.gson.GsonConverterFactory
+import ru.andrewkir.hse_mooc.BuildConfig
+import ru.andrewkir.hse_mooc.data.network.api.AuthApi
+import ru.andrewkir.hse_mooc.domain.network.JWTAuthenticator
+import ru.andrewkir.hse_mooc.domain.network.api.CoursesApi
+import ru.andrewkir.hse_mooc.domain.network.api.TokensApi
+import java.util.concurrent.TimeUnit
+import javax.inject.Singleton
+
+@Module
+internal class NetworkModule {
+
+    @Provides
+    @Singleton
+    fun provideAuthenticator(authenticator: JWTAuthenticator): Authenticator =
+        authenticator
+
+    @Provides
+    @Singleton
+    fun provideOkHttpClient(
+        authenticator: JWTAuthenticator? = null,
+        accessToken: String? = null,
+        refreshToken: String? = null
+    ): OkHttpClient {
+        return OkHttpClient.Builder()
+            .connectTimeout(10, TimeUnit.SECONDS)
+            .readTimeout(10, TimeUnit.SECONDS)
+            .writeTimeout(10, TimeUnit.SECONDS)
+            .addInterceptor { chain ->
+                chain.proceed(
+                    chain.request().newBuilder().also {
+                        it.addHeader("Accept", "application/json")
+                        if (accessToken != null) {
+                            it.addHeader(
+                                "Authorization",
+                                "Bearer $accessToken"
+                            )
+                        }
+                        if (refreshToken != null) {
+                            it.addHeader(
+                                "x-refresh-token",
+                                "$refreshToken"
+                            )
+                        }
+                    }.build()
+                )
+            }
+            .also { client ->
+                if (BuildConfig.DEBUG) {
+                    val logging = HttpLoggingInterceptor()
+                    logging.setLevel(HttpLoggingInterceptor.Level.BODY)
+                    client.addInterceptor(logging)
+                }
+                if (authenticator != null) {
+                    client.authenticator(authenticator)
+                }
+            }.build()
+    }
+
+    @Provides
+    @Singleton
+    fun provideRetrofit(okHttpClient: OkHttpClient) : Retrofit {
+        return Retrofit.Builder()
+            .baseUrl(BASE_URL)
+            .client(okHttpClient)
+            .addConverterFactory(GsonConverterFactory.create())
+            .build()
+    }
+
+    @Provides
+    @Singleton
+    fun provideAuthApi(retrofit: Retrofit): AuthApi = retrofit.create(AuthApi::class.java)
+
+    @Provides
+    @Singleton
+    fun provideCoursesApi(retrofit: Retrofit): CoursesApi = retrofit.create(CoursesApi::class.java)
+
+    @Provides
+    @Singleton
+    fun provideTokensApi(retrofit: Retrofit): TokensApi = retrofit.create(TokensApi::class.java)
+
+
+
+
+    companion object {
+        const val BASE_URL = "https://api.mooc.ij.je/"
+    }
+}
\ No newline at end of file
diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelModule.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelModule.kt
index 4281c75..4497bc5 100644
--- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelModule.kt
+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelModule.kt
@@ -21,30 +21,30 @@ abstract class ViewModelModule {
     @Binds
     @IntoMap
     @ViewModelKey(ProfileViewModel::class)
-    abstract fun viewModel(viewModel: ProfileViewModel): ViewModel
+    abstract fun profileViewModel(viewModel: ProfileViewModel): ViewModel
 
     @Binds
     @IntoMap
     @ViewModelKey(LoginViewModel::class)
-    abstract fun viewModel(viewModel: LoginViewModel): ViewModel
+    abstract fun loginViewModel(viewModel: LoginViewModel): ViewModel
 
     @Binds
     @IntoMap
     @ViewModelKey(RegisterViewModel::class)
-    abstract fun viewModel(viewModel: RegisterViewModel): ViewModel
+    abstract fun registerViewModel(viewModel: RegisterViewModel): ViewModel
 
     @Binds
     @IntoMap
     @ViewModelKey(CourseViewModel::class)
-    abstract fun viewModel(viewModel: CourseViewModel): ViewModel
+    abstract fun courseViewModel(viewModel: CourseViewModel): ViewModel
 
     @Binds
     @IntoMap
     @ViewModelKey(CoursesSearchViewModel::class)
-    abstract fun viewModel(viewModel: CoursesSearchViewModel): ViewModel
+    abstract fun coursesSearchViewModel(viewModel: CoursesSearchViewModel): ViewModel
 
     @Binds
     @IntoMap
     @ViewModelKey(CoursesMainViewModel::class)
-    abstract fun viewModel(viewModel: CoursesMainViewModel): ViewModel
+    abstract fun coursesMainViewModel(viewModel: CoursesMainViewModel): ViewModel
 }
\ No newline at end of file
diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/auth/login/LoginFragment.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/auth/login/LoginFragment.kt
index 9fc6b80..ea38613 100644
--- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/auth/login/LoginFragment.kt
+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/auth/login/LoginFragment.kt
@@ -6,9 +6,12 @@ import android.view.View
 import android.view.ViewGroup
 import androidx.core.widget.addTextChangedListener
 import androidx.lifecycle.Observer
+import androidx.lifecycle.ViewModelProvider
 import androidx.navigation.Navigation
+import ru.andrewkir.hse_mooc.App
 import ru.andrewkir.hse_mooc.R
 import ru.andrewkir.hse_mooc.common.BaseFragment
+import ru.andrewkir.hse_mooc.common.ViewModelFactory
 import ru.andrewkir.hse_mooc.common.handleApiError
 import ru.andrewkir.hse_mooc.common.startActivityClearBackStack
 import ru.andrewkir.hse_mooc.data.network.api.AuthApi
@@ -16,10 +19,17 @@ import ru.andrewkir.hse_mooc.data.repositories.AuthRepositoryImpl
 import ru.andrewkir.hse_mooc.databinding.FragmentLoginBinding
 import ru.andrewkir.hse_mooc.domain.model.ApiResponse
 import ru.andrewkir.hse_mooc.flows.courses.CoursesActivity
+import javax.inject.Inject
 
 class LoginFragment : BaseFragment<LoginViewModel, AuthRepositoryImpl, FragmentLoginBinding>() {
 
-    override fun provideViewModelClass(): Class<LoginViewModel> = LoginViewModel::class.java
+    @Inject
+    lateinit var viewModelFactory: ViewModelFactory
+
+    override fun provideViewModel(): LoginViewModel {
+        (requireContext().applicationContext as App).appComponent.inject(this)
+        return ViewModelProvider(this, viewModelFactory)[LoginViewModel::class.java]
+    }
 
     override fun provideRepository(): AuthRepositoryImpl =
         AuthRepositoryImpl(
diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/auth/login/LoginViewModel.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/auth/login/LoginViewModel.kt
index 22564e3..5b986cf 100644
--- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/auth/login/LoginViewModel.kt
+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/auth/login/LoginViewModel.kt
@@ -8,8 +8,9 @@ import ru.andrewkir.hse_mooc.common.BaseViewModel
 import ru.andrewkir.hse_mooc.data.repositories.AuthRepositoryImpl
 import ru.andrewkir.hse_mooc.domain.model.ApiResponse
 import ru.andrewkir.hse_mooc.domain.network.responses.Login.LoginResponse
+import javax.inject.Inject
 
-class LoginViewModel(
+class LoginViewModel @Inject constructor(
     private val repo: AuthRepositoryImpl
 ) : BaseViewModel(repo) {
 
diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/auth/register/RegisterViewModel.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/auth/register/RegisterViewModel.kt
index d4432a6..34928dd 100644
--- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/auth/register/RegisterViewModel.kt
+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/auth/register/RegisterViewModel.kt
@@ -9,8 +9,9 @@ import ru.andrewkir.hse_mooc.common.BaseViewModel
 import ru.andrewkir.hse_mooc.data.repositories.AuthRepositoryImpl
 import ru.andrewkir.hse_mooc.domain.model.ApiResponse
 import ru.andrewkir.hse_mooc.domain.network.responses.Login.LoginResponse
+import javax.inject.Inject
 
-class RegisterViewModel(
+class RegisterViewModel @Inject constructor(
     private val repo: AuthRepositoryImpl
 ) : BaseViewModel(repo) {
 
diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/course/CourseViewModel.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/course/CourseViewModel.kt
index 4e6c06f..618f1aa 100644
--- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/course/CourseViewModel.kt
+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/course/CourseViewModel.kt
@@ -9,8 +9,9 @@ import ru.andrewkir.hse_mooc.domain.model.ApiResponse
 import ru.andrewkir.hse_mooc.data.repositories.CourseRepositoryImpl
 import ru.andrewkir.hse_mooc.domain.network.responses.Course.CourseResponse
 import ru.andrewkir.hse_mooc.domain.network.responses.Reviews.Review
+import javax.inject.Inject
 
-class CourseViewModel(
+class CourseViewModel @Inject constructor(
     private val courseRepository: CourseRepositoryImpl
 ) : BaseViewModel(courseRepository) {
 
diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/courses/main/CoursesMainViewModel.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/courses/main/CoursesMainViewModel.kt
index df80d25..18731e6 100644
--- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/courses/main/CoursesMainViewModel.kt
+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/courses/main/CoursesMainViewModel.kt
@@ -8,9 +8,10 @@ import ru.andrewkir.hse_mooc.data.repositories.CoursesMainRepositoryImpl
 import ru.andrewkir.hse_mooc.domain.model.ApiResponse
 import ru.andrewkir.hse_mooc.domain.network.responses.CoursesPreview.CoursePreview
 import ru.andrewkir.hse_mooc.domain.responses.Compilations.CompilationsResponse
+import javax.inject.Inject
 
 
-class CoursesMainViewModel(
+class CoursesMainViewModel @Inject constructor(
     private val mainCoursesRepository: CoursesMainRepositoryImpl
 ) : BaseViewModel(mainCoursesRepository) {
 
diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/courses/profile/ProfileViewModel.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/courses/profile/ProfileViewModel.kt
index f41042b..b0ee1d2 100644
--- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/courses/profile/ProfileViewModel.kt
+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/flows/courses/profile/ProfileViewModel.kt
@@ -7,8 +7,9 @@ import ru.andrewkir.hse_mooc.common.BaseViewModel
 import ru.andrewkir.hse_mooc.data.repositories.ProfileRepositoryImpl
 import ru.andrewkir.hse_mooc.domain.model.ApiResponse
 import ru.andrewkir.hse_mooc.domain.network.responses.CoursesPreview.CoursePreview
+import javax.inject.Inject
 
-class ProfileViewModel(
+class ProfileViewModel @Inject constructor(
     private val profileRepository: ProfileRepositoryImpl
 ) : BaseViewModel(profileRepository) {
 
@@ -20,10 +21,10 @@ class ProfileViewModel(
         MutableLiveData<List<CoursePreview>>()
     }
 
-    fun getFavorites(){
+    fun getFavorites() {
         viewModelScope.launch {
             mutableLoading.value = true
-            when(val result = profileRepository.getFavoritesCourses()){
+            when (val result = profileRepository.getFavoritesCourses()) {
                 is ApiResponse.OnSuccessResponse -> {
                     favoritesCourses.value = result.value.favouriteCourses
                 }
@@ -35,10 +36,10 @@ class ProfileViewModel(
         }
     }
 
-    fun getViewed(){
+    fun getViewed() {
         viewModelScope.launch {
             mutableLoading.value = true
-            when(val result = profileRepository.getViewedCourses()){
+            when (val result = profileRepository.getViewedCourses()) {
                 is ApiResponse.OnSuccessResponse -> {
                     viewedCourses.value = result.value.viewedCourses
                 }
diff --git a/out.diff b/out.diff
deleted file mode 100644
index 93e1185..0000000
--- a/out.diff
+++ /dev/null
@@ -1,236 +0,0 @@
-diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/AppModule.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/AppModule.kt
-new file mode 100644
-index 0000000..d350a0d
---- /dev/null
-+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/AppModule.kt
-@@ -0,0 +1,4 @@
-+package ru.andrewkir.hse_mooc.di
-+
-+class AppModule {
-+}
-\ No newline at end of file
-diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/DataModule.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/DataModule.kt
-new file mode 100644
-index 0000000..b567c15
---- /dev/null
-+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/DataModule.kt
-@@ -0,0 +1,4 @@
-+package ru.andrewkir.hse_mooc.di
-+
-+class DataModule {
-+}
-\ No newline at end of file
-diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelKey.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelKey.kt
-new file mode 100644
-index 0000000..8b56623
---- /dev/null
-+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelKey.kt
-@@ -0,0 +1,4 @@
-+package ru.andrewkir.hse_mooc.di
-+
-+class ViewModelKey {
-+}
-\ No newline at end of file
-diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelModule.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelModule.kt
-new file mode 100644
-index 0000000..4ce3c34
---- /dev/null
-+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelModule.kt
-@@ -0,0 +1,4 @@
-+package ru.andrewkir.hse_mooc.di
-+
-+class ViewModelModule {
-+}
-\ No newline at end of file
-diff --git a/hse_mooc/app/build.gradle b/hse_mooc/app/build.gradle
-index b28bda0..bebb878 100644
---- a/hse_mooc/app/build.gradle
-+++ b/hse_mooc/app/build.gradle
-@@ -76,5 +76,8 @@ dependencies {
-     implementation 'com.squareup.retrofit2:retrofit:2.9.0'
-     implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
-     implementation("com.squareup.okhttp3:logging-interceptor:4.9.0")
-+
-+    implementation 'com.google.dagger:dagger:2.43.2'
-+    kapt 'com.google.dagger:dagger-compiler:2.43.2'
- }
- 
-diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/common/ViewModelFactory.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/common/ViewModelFactory.kt
-index e365811..a6102f6 100644
---- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/common/ViewModelFactory.kt
-+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/common/ViewModelFactory.kt
-@@ -2,29 +2,12 @@ package ru.andrewkir.hse_mooc.common
- 
- import androidx.lifecycle.ViewModel
- import androidx.lifecycle.ViewModelProvider
--import ru.andrewkir.hse_mooc.data.repositories.*
--import ru.andrewkir.hse_mooc.domain.repositories.*
--import ru.andrewkir.hse_mooc.flows.auth.login.LoginViewModel
--import ru.andrewkir.hse_mooc.flows.auth.register.RegisterViewModel
--import ru.andrewkir.hse_mooc.flows.course.CourseViewModel
--import ru.andrewkir.hse_mooc.flows.courses.main.CoursesMainViewModel
--import ru.andrewkir.hse_mooc.flows.courses.profile.ProfileViewModel
--import ru.andrewkir.hse_mooc.flows.courses.search.CoursesSearchViewModel
-+import javax.inject.Inject
-+import javax.inject.Provider
- 
--class ViewModelFactory(
--    private val repository: BaseRepository
--) : ViewModelProvider.NewInstanceFactory() {
-+class ViewModelFactory @Inject constructor(private val viewModels: MutableMap<Class<out ViewModel>,
-+        @JvmSuppressWildcards Provider<ViewModel>>): ViewModelProvider.Factory {
- 
--    @Suppress("UNCHECKED_CAST")
--    override fun <T : ViewModel> create(modelClass: Class<T>): T {
--        return when {
--            modelClass.isAssignableFrom(LoginViewModel::class.java) -> LoginViewModel(repository as AuthRepositoryImpl) as T
--            modelClass.isAssignableFrom(RegisterViewModel::class.java) -> RegisterViewModel(repository as AuthRepositoryImpl) as T
--            modelClass.isAssignableFrom(CoursesSearchViewModel::class.java) -> CoursesSearchViewModel(repository as CoursesSearchRepositoryImpl) as T
--            modelClass.isAssignableFrom(CoursesMainViewModel::class.java) -> CoursesMainViewModel(repository as CoursesMainRepositoryImpl) as T
--            modelClass.isAssignableFrom(CourseViewModel::class.java) -> CourseViewModel(repository as CourseRepositoryImpl) as T
--            modelClass.isAssignableFrom(ProfileViewModel::class.java) -> ProfileViewModel(repository as ProfileRepositoryImpl) as T
--            else -> throw IllegalArgumentException("Provide correct viewModel class")
--        }
--    }
-+    override fun <T : ViewModel> create(modelClass: Class<T>): T =
-+        viewModels[modelClass]?.get() as T
- }
-\ No newline at end of file
-diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/AppModule.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/AppModule.kt
-index d350a0d..e032c65 100644
---- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/AppModule.kt
-+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/AppModule.kt
-@@ -1,4 +1,11 @@
- package ru.andrewkir.hse_mooc.di
- 
--class AppModule {
-+import android.content.Context
-+import dagger.Module
-+import dagger.Provides
-+
-+@Module
-+class AppModule(val context: Context) {
-+    @Provides
-+    fun provideContext(): Context = context
- }
-\ No newline at end of file
-diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/DataModule.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/DataModule.kt
-index b567c15..0031a9c 100644
---- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/DataModule.kt
-+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/DataModule.kt
-@@ -1,4 +1,34 @@
- package ru.andrewkir.hse_mooc.di
- 
-+import android.content.Context
-+import dagger.Module
-+import dagger.Provides
-+import ru.andrewkir.hse_mooc.data.network.api.AuthApi
-+import ru.andrewkir.hse_mooc.data.repositories.*
-+import ru.andrewkir.hse_mooc.domain.network.api.CoursesApi
-+import ru.andrewkir.hse_mooc.domain.repositories.*
-+
-+@Module
- class DataModule {
-+
-+    @Provides
-+    fun provideAuthRepository(authApi: AuthApi): AuthRepository =
-+        AuthRepositoryImpl(authApi)
-+
-+    @Provides
-+    fun provideProfileRepository(coursesApi: CoursesApi): ProfileRepository =
-+        ProfileRepositoryImpl(coursesApi)
-+
-+    @Provides
-+    fun provideCourseRepository(coursesApi: CoursesApi): CourseRepository =
-+        CourseRepositoryImpl(coursesApi)
-+
-+    @Provides
-+    fun provideCoursesMainRepository(coursesApi: CoursesApi): CoursesMainRepository =
-+        CoursesMainRepositoryImpl(coursesApi)
-+
-+    @Provides
-+    fun provideCoursesSearchRepository(coursesApi: CoursesApi): CoursesSearchRepository =
-+        CoursesSearchRepositoryImpl(coursesApi)
-+
- }
-\ No newline at end of file
-diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelKey.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelKey.kt
-index 8b56623..878d1b9 100644
---- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelKey.kt
-+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelKey.kt
-@@ -1,4 +1,14 @@
- package ru.andrewkir.hse_mooc.di
- 
--class ViewModelKey {
--}
-\ No newline at end of file
-+import androidx.lifecycle.ViewModel
-+import dagger.MapKey
-+import kotlin.reflect.KClass
-+
-+@Target(
-+    AnnotationTarget.FUNCTION,
-+    AnnotationTarget.PROPERTY_GETTER,
-+    AnnotationTarget.PROPERTY_SETTER
-+)
-+@Retention(AnnotationRetention.RUNTIME)
-+@MapKey
-+annotation class ViewModelKey(val value: KClass<out ViewModel>)
-\ No newline at end of file
-diff --git a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelModule.kt b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelModule.kt
-index 4ce3c34..4281c75 100644
---- a/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelModule.kt
-+++ b/hse_mooc/app/src/main/java/ru/andrewkir/hse_mooc/di/ViewModelModule.kt
-@@ -1,4 +1,50 @@
- package ru.andrewkir.hse_mooc.di
- 
--class ViewModelModule {
-+import androidx.lifecycle.ViewModel
-+import androidx.lifecycle.ViewModelProvider
-+import dagger.Binds
-+import dagger.Module
-+import dagger.multibindings.IntoMap
-+import ru.andrewkir.hse_mooc.common.ViewModelFactory
-+import ru.andrewkir.hse_mooc.flows.auth.login.LoginViewModel
-+import ru.andrewkir.hse_mooc.flows.auth.register.RegisterViewModel
-+import ru.andrewkir.hse_mooc.flows.course.CourseViewModel
-+import ru.andrewkir.hse_mooc.flows.courses.main.CoursesMainViewModel
-+import ru.andrewkir.hse_mooc.flows.courses.profile.ProfileViewModel
-+import ru.andrewkir.hse_mooc.flows.courses.search.CoursesSearchViewModel
-+
-+@Module
-+abstract class ViewModelModule {
-+    @Binds
-+    abstract fun bindViewModelFactory(factory: ViewModelFactory): ViewModelProvider.Factory
-+
-+    @Binds
-+    @IntoMap
-+    @ViewModelKey(ProfileViewModel::class)
-+    abstract fun viewModel(viewModel: ProfileViewModel): ViewModel
-+
-+    @Binds
-+    @IntoMap
-+    @ViewModelKey(LoginViewModel::class)
-+    abstract fun viewModel(viewModel: LoginViewModel): ViewModel
-+
-+    @Binds
-+    @IntoMap
-+    @ViewModelKey(RegisterViewModel::class)
-+    abstract fun viewModel(viewModel: RegisterViewModel): ViewModel
-+
-+    @Binds
-+    @IntoMap
-+    @ViewModelKey(CourseViewModel::class)
-+    abstract fun viewModel(viewModel: CourseViewModel): ViewModel
-+
-+    @Binds
-+    @IntoMap
-+    @ViewModelKey(CoursesSearchViewModel::class)
-+    abstract fun viewModel(viewModel: CoursesSearchViewModel): ViewModel
-+
-+    @Binds
-+    @IntoMap
-+    @ViewModelKey(CoursesMainViewModel::class)
-+    abstract fun viewModel(viewModel: CoursesMainViewModel): ViewModel
- }
-\ No newline at end of file
